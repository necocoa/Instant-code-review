script src='https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.28/vue.min.js'
script src='https://cdn.jsdelivr.net/npm/marked/marked.min.js'
script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.3.1/build/highlight.min.js'
link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.3.1/build/styles/github.min.css"

#post_title.mb-3
  h1 = @post.title

#post_content
  .mb-5
    .pb-3 投稿者: #{@post.user.name}
    .py-4.px-2 = markdown_to_html(@post.body)

    - if @post.user == current_user
      = link_to '削除', @post, method: :delete, class: 'btn btn-danger', data: { confirm: '投稿を削除しますか？' }

#post_review
  h3.mb-3
    | レビュー
    span.text-danger =<> @post_reviews.length
    | 件
  .mb-3.border-top.border-bottom
    ul.list-group.list-group-flush
      - @post_reviews.each do |post_review|
        li.list-group-item
          .my-3 = markdown_to_html(post_review.body)
          .small
            - if post_review.user.reviewer_url.present?
              .my-3.d-flex.justify-content-end
                .cta-box-mx.p-4.bg-light.rounded-lg
                  .mb-3 = post_review.user.call_to_action_message
                  .d-flex.justify-content-end
                    - if Rails.env.production?
                      = link_to 'レビューを受ける', post_review.user.reviewer_url,
                                               target: '_blank', rel: 'noopener noreferrer nofollow',
                                               class: 'btn btn-outline-info btn-sm', id: 'review_cta_btn',
                                               onclick: "gtag('event', 'click', {'event_category': 'link', 'event_label': 'レビューCTAクリック', 'value': '1'})"
                    - else
                      = link_to 'レビューを受ける', post_review.user.reviewer_url,
                                               target: '_blank', rel: 'noopener noreferrer nofollow',
                                               class: 'btn btn-outline-info btn-sm', id: 'review_cta_btn'
            .my-3.d-flex.justify-content-end
              . id="post_review_like_#{post_review.id}"
                = render '/post_review_likes/like', post_review: post_review
              - if post_review.user == current_user
                .mr-3
                  = link_to [@post, post_review], method: :delete, class: 'text-muted', data: { confirm: 'レビューを削除しますか？' } do
                    i.fas.fa-trash
              .mr-3 = "投稿 #{l(post_review.created_at, format: :long)}"
              .font-weight-bold = post_review.user.name
          - if user_signed_in? || post_review.comments.exists?
            .ml-5.pt-3.pl-5.border-top
              - post_review.comments.each do |comment|
                .mb-2
                  .mb-1.d-flex.small
                    - if comment.user == post_review.user
                      .pr-2: i.fas.fa-user-tie
                    - elsif comment.user == @post.user
                      .pr-2: i.fas.fa-user
                    .pr-2.font-weight-bold = comment.user.name
                    .pr-2 = l(post_review.created_at, format: :long)
                    - if comment.user == current_user
                      = link_to [@post, post_review, comment], method: :delete, class: 'text-muted', data: { confirm: 'コメントを削除しますか？' }
                        i.fas.fa-trash
                  . = comment.body
              - if user_signed_in?
                . = form_with model: [@post, post_review, @post_review_comments], local: true do |f|
                  - if post_review == @post_review_comments.post_review
                    = render 'shared/form_errors', resource: @post_review_comments
                  .form-group
                    = f.text_area :body, class: 'form-control', required: true
                  .form-group.d-flex.justify-content-end
                    = f.submit 'コメントする', class: 'btn btn-outline-secondary'

- if user_signed_in? && @post.user != current_user
  #post_review_form
    .pb-3.mb-2
      = form_with model: [@post, @post_review], local: true do |f|
        = render 'shared/form_errors', resource: @post_review
        .form-group
          #editor
            = f.label :body
            = f.text_area :body, rows: 10, class: 'form-control', required: true, placeholder: "レビュー内容を入力してください\n※Markdown記法が利用できます", 'v-model': 'preview_post_review', debounce: 50
            .md-preview.my-4.p-4.rounded v-html='preview_post_review | marked'
        .form-group
          = f.submit 'レビューする', class: 'btn btn-primary'

  javascript:
    document.addEventListener('turbolinks:load', () => {
      new Vue({
        el: '#editor',
        data: {
          preview_post_review: "#{j @post_review.body}",
        },
        filters: {
          marked: marked,
        },
        created: () => {
          marked.setOptions({
            highlight: (code, lang) => {
              return hljs.highlightAuto(code, [lang]).value
            }
          });
        },
      });
    })
