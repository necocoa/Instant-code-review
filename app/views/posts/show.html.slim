#post_title
  .jumbotron.jumbotron-fluid
    .container
      h1 = @post.title

#post_content
  .mb-5
    .pb-3 投稿者: #{@post.user.name}

    .p-2 = markdown_to_html(@post.body)

    - if @has_current_post
      = link_to '削除', @post, method: :delete, class: 'btn btn-danger', data: { confirm: '投稿を削除しますか？' }

#post_review
  h3.mb-3 = "レビュー #{@post_reviews.length}件"
  .mb-3.py-4.border-top.border-bottom
    ul.list-group.list-group-flush
      - @post_reviews.each do |post_review|
        li.list-group-item
          . = markdown_to_html(post_review.body)
          .d-flex.justify-content-end
            .mr-3
              small = "投稿 #{l(post_review.created_at, format: :long)}"
            .
              small = post_review.user.name
            - if @has_current_post
              i.fas.fa-trach

- if user_signed_in? && !@has_current_post
  #post_review_form
    .pb-3.mb-2
      = form_with model: [@post, @post_review], local: true do |f|
        / TODO: DRYにしたい
        - if @post_review.errors.any?
          #error_explanation
            h2 レビューが保存されませんでした
            ul
              - @post_review.errors.full_messages.each do |message|
                li = message

        .form-group
          = f.label :body
          = f.text_area :body, class: 'form-control', required: true, placeholder: "レビュー内容を入力してください\n※Markdown記法が利用できます"
        .form-group
          = f.submit 'レビューする', class: 'btn btn-primary'
